const val botName = "Hello! My name is Adam."
const val botCreated = "I was created in 2021"
const val greetings = "Please, remind me your name."

fun main() {
    println(botName)
    println(botCreated)
    println(greetings)
    yourName()
    agePrinter()
    counterPrinter()
    questionPrinter()
    questionChecker()
}

/** Delete all num */
fun yourName() {
    /** 1. "try - catch" statement */
    return try {
        val nameIn = readLine()!!.toString()
        val textWithoutNum = nameIn.filter {
            !it.isDigit()
        }
        /** 2. If it is empty after deleting all num from readline */
    if (textWithoutNum.isEmpty()) {
        throw Exception()
    } else {
        println("What a great name you have, $textWithoutNum!")
    }
        /** 3. Exception */
    } catch (e: Exception) {
        println("Wrong input!")
        yourName()
    }
}

/** Predict the age of a user */
fun agePrinter() {
    /** 1. Print 2 first lines */
    println("Let me guess your age.")
    println("Enter remainders of dividing your age by 3, 5 and 7.")
    /** 2. After that 3 - readiness in "try - catch" */
    return try {
        val ageIn1 = readLine()!!.toInt()
        val ageIn2 = readLine()!!.toInt()
        val ageIn3 = readLine()!!.toInt()
        /** 3. After that lambda, remind age */
        val remainder = { a: Int, b: Int, c: Int -> (a * 70 + b * 21 + c * 15) % 105 }
        /** 4. Checking errors by Exception */
        when {
            ageIn1 < 0 -> {
                throw NumberFormatException()
            }
            ageIn2 < 0 -> {
                throw NumberFormatException()
            }
            ageIn3 < 0 -> {
                throw NumberFormatException()
            }
            else -> {
                /** 5. Return result by lambda in println */
                println("Your age is ${remainder(ageIn1, ageIn2, ageIn3)}; that's a good time to start programming!")
            }
        }
    } catch (e: NumberFormatException) {
        println("Wrong input!")
        agePrinter()
    }
}

/** Count function */
fun counterPrinter() {
    /** 1. Print info */
    println("Now I will prove to you that I can count to any number you want.")
    /** 2. Readline and loop for input num */
    return try {
        val countIn = readLine()!!.toInt()
        for (i in 0..countIn) {
            println("$i!")
        }
        /** 3. Checking errors by Exception */
        when {
            countIn < 0 -> {
                throw NumberFormatException()
            }
            /** 4. Stop function */
            else -> {
                return
            }
        }
    } catch (e: NumberFormatException) {
        println("Wrong input!")
        counterPrinter()
    }
}

/** Question Printer */
fun questionPrinter() {
    /** 1. Print info */
    println("Let's test your programming knowledge.")
    println("Why do we use methods?")
    println("1. To repeat a statement multiple times.")
    println("2. To decompose a program into several small subroutines.")
    println("3. To determine the execution time of a program.")
    println("4. To interrupt the execution of a program.")
}

/** Question Checker */
fun questionChecker() {
    /** 1. Readline and loop for input num */
    return try {
        /** 2. Checking true answer */
        when (readLine()!!.toInt()) {
            1 -> {
                println("Please, try again.")
                questionChecker()
            }
            2 -> {
                /** 3. Return result and stop program */
                println("Congratulations, have a nice day!")
                return
            }
            3 -> {
                println("Please, try again.")
                questionChecker()
            }
            4 -> {
                println("Please, try again.")
                questionChecker()
            }
            /** 4. If in is wrong answer return function */
            else -> {
                println("Wrong input number!")
                println("Please, try again.")
                questionChecker()
            }
        }
    } catch (e: NumberFormatException) {
        println("Wrong input!")
        questionChecker()
    }
}
